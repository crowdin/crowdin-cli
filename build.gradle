import com.github.spotbugs.snom.SpotBugsReport

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'jacoco'
    id "com.github.spotbugs" version "4.7.1"
}

apply plugin: 'checkstyle'

group 'com.crowdin'
version '3.10.1'

sourceCompatibility = 1.8

if (!hasProperty('mainClass')) {
    ext.mainClass = 'com.crowdin.cli.Cli'
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io'}
    maven {
        url "https://repo1.maven.org/maven2"
    }
}

dependencies {
    implementation 'org.json:json:20210307'
    implementation 'commons-cli:commons-cli:1.4'
    implementation 'org.apache.logging.log4j:log4j-api:2.17.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
    implementation 'org.yaml:snakeyaml:1.29'
    implementation 'commons-io:commons-io:2.10.0'

    implementation 'org.glassfish.jersey.core:jersey-client:3.0.2'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:3.0.2'
    implementation 'org.glassfish.jersey.media:jersey-media-multipart:3.0.2'
    implementation 'javax.activation:activation:1.1.1'

    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'net.lingala.zip4j:zip4j:2.8.0'
    implementation 'net.ricecode:string-similarity:1.0.0'
    implementation 'com.github.fge:json-patch:1.9'
    implementation 'io.github.cdimascio:dotenv-java:2.2.0'

    implementation 'org.apache.httpcomponents:httpclient:4.5.13'

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'

    implementation 'info.picocli:picocli:4.6.1'

    implementation 'com.github.crowdin:crowdin-api-client-java:1.4.2'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.mockito:mockito-core:3.11.2'

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.11.0'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Crowdin CLI',
                'Implementation-Version': archiveVersion,
                'Main-Class': 'com.crowdin.cli.Cli'
    }
}

shadowJar {
    setArchivesBaseName('crowdin-cli')
    getArchiveClassifier().set('')
    minimize {
        exclude(dependency('org.apache.httpcomponents:httpclient'))
        exclude(dependency('com.fasterxml.jackson.core:jackson-databind'))
        exclude(dependency('info.picocli:picocli'))
    }
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = file("$buildDir/reports")
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        xml.destination file("${buildDir}/coverage.xml")
    }

    getExecutionData().setFrom("$buildDir/jacoco/test.exec")
}

/////////////////////////
// STATIC ANALYSIS //////
/////////////////////////

spotbugs {
    ignoreFailures = false
    excludeFilter = file("config/spotbugs/excludeFilter.xml")
}
spotbugsMain {
    onlyIf {project.hasProperty('staticAnalysisMarker')}
    reports(({
        html {
            required = true
            destination = file("$buildDir/reports/staticAnalysis/spotbugs-main.html")
            stylesheet = 'fancy-hist.xsl'
        }
    } as Closure<NamedDomainObjectContainer<? extends SpotBugsReport>>))
}
spotbugsTest {
    onlyIf {project.hasProperty('staticAnalysisMarker')}
    reports(({
        html {
            required = true
            destination = file("$buildDir/reports/staticAnalysis/spotbugs-test.html")
            stylesheet = 'fancy-hist.xsl'
        }
    } as Closure<NamedDomainObjectContainer<? extends SpotBugsReport>>))
}

checkstyle {
    toolVersion '8.44'
    configFile file("config/checkstyle/checkstyle.xml")
}
checkstyleMain {
    onlyIf {project.hasProperty('staticAnalysisMarker')}
    source ='src/main/java'
    reports(({
        html {
            required = true
            destination = file("$buildDir/reports/staticAnalysis/checkstyle-main.html")
        }
        xml.required = false
    }))
}
checkstyleTest {
    onlyIf {project.hasProperty('staticAnalysisMarker')}
    source ='src/test/java'
    reports(({
        html {
            required = true
            destination = file("$buildDir/reports/staticAnalysis/checkstyle-test.html")
        }
        xml.required = false
    }))
}

task staticAnalysis(type: GradleBuild) {
    tasks = ['checkstyleMain', 'checkstyleTest', 'spotbugsMain', 'spotbugsTest']
}

