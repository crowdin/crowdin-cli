import com.github.spotbugs.snom.SpotBugsReport
import static de.fayard.refreshVersions.core.Versions.versionFor

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow'
    id 'jacoco'
    id 'com.github.spotbugs'
    id 'org.asciidoctor.jvm.convert'
}

apply plugin: 'checkstyle'

group 'com.crowdin'
version '3.15.0'

sourceCompatibility = 1.8

if (!hasProperty('mainClass')) {
    ext.mainClass = 'com.crowdin.cli.Cli'
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io'}
    maven {
        url "https://repo1.maven.org/maven2"
    }
}

dependencies {
    implementation 'org.json:json:_'
    implementation 'commons-cli:commons-cli:_'
    implementation 'org.apache.logging.log4j:log4j-api:_'
    implementation 'org.apache.logging.log4j:log4j-core:_'
    implementation 'org.yaml:snakeyaml:_'
    implementation 'commons-io:commons-io:_'

    implementation 'javax.activation:activation:_'

    implementation 'org.apache.commons:commons-lang3:_'
    implementation 'net.lingala.zip4j:zip4j:_'
    implementation 'net.ricecode:string-similarity:_'
    implementation 'io.github.cdimascio:dotenv-java:_'

    implementation 'org.apache.httpcomponents:httpclient:_'

    compileOnly 'org.projectlombok:lombok:_'
    annotationProcessor 'org.projectlombok:lombok:_'
    testCompileOnly 'org.projectlombok:lombok:_'
    testAnnotationProcessor 'org.projectlombok:lombok:_'

    implementation 'com.github.crowdin:crowdin-api-client-java:_'

    testImplementation Testing.junit.jupiter
    testImplementation Testing.hamcrest
    testImplementation Testing.mockito.core

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:_'
}

dependencies {
    implementation "info.picocli:picocli:_"
    annotationProcessor "info.picocli:picocli-codegen:_"
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Crowdin CLI',
                'Implementation-Version': archiveVersion,
                'Main-Class': 'com.crowdin.cli.Cli'
    }
}

shadowJar {
    setArchivesBaseName('crowdin-cli')
    getArchiveClassifier().set('')
    minimize {
        exclude(dependency('org.apache.httpcomponents:httpclient'))
        exclude(dependency('com.fasterxml.jackson.core:jackson-databind'))
        exclude(dependency('info.picocli:picocli'))
        exclude(dependency('info.picocli:picocli-codegen'))
    }
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = versionFor(project, "version.jacoco")
    reportsDirectory = file("$buildDir/reports")
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        xml.destination file("${buildDir}/coverage.xml")
    }

    getExecutionData().setFrom("$buildDir/jacoco/test.exec")
}

/////////////////////////
// STATIC ANALYSIS //////
/////////////////////////

spotbugs {
    ignoreFailures = false
    excludeFilter = file("config/spotbugs/excludeFilter.xml")
}
spotbugsMain {
    onlyIf {project.hasProperty('staticAnalysisMarker')}
    reports(({
        html {
            required = true
            destination = file("$buildDir/reports/staticAnalysis/spotbugs-main.html")
            stylesheet = 'fancy-hist.xsl'
        }
    } as Closure<NamedDomainObjectContainer<? extends SpotBugsReport>>))
}
spotbugsTest {
    onlyIf {project.hasProperty('staticAnalysisMarker')}
    reports(({
        html {
            required = true
            destination = file("$buildDir/reports/staticAnalysis/spotbugs-test.html")
            stylesheet = 'fancy-hist.xsl'
        }
    } as Closure<NamedDomainObjectContainer<? extends SpotBugsReport>>))
}

checkstyle {
    toolVersion '9.3'
    configFile file("config/checkstyle/checkstyle.xml")
}
checkstyleMain {
    onlyIf {project.hasProperty('staticAnalysisMarker')}
    source ='src/main/java'
    reports(({
        html {
            required = true
            destination = file("$buildDir/reports/staticAnalysis/checkstyle-main.html")
        }
        xml.required = false
    }))
}
checkstyleTest {
    onlyIf {project.hasProperty('staticAnalysisMarker')}
    source ='src/test/java'
    reports(({
        html {
            required = true
            destination = file("$buildDir/reports/staticAnalysis/checkstyle-test.html")
        }
        xml.required = false
    }))
}

task staticAnalysis(type: GradleBuild) {
    tasks = ['checkstyleMain', 'checkstyleTest', 'spotbugsMain', 'spotbugsTest']
}

task generateManpageAsciiDoc(type: JavaExec) {
    dependsOn(classes)
    group = "Documentation"
    description = "Generate AsciiDoc manpage"
    classpath(configurations.compileClasspath, configurations.annotationProcessor, sourceSets.main.runtimeClasspath)
    main 'picocli.codegen.docgen.manpage.ManPageGenerator'
    args "com.crowdin.cli.commands.picocli.RootCommand", "--outdir=website/generated-picocli-docs", "-v" //, "--template-dir=website/mantemplates"
}
